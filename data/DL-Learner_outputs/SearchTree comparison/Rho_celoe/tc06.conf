// perform cross validation
cli.type = "org.dllearner.cli.CLI"
cli.performCrossValidation = true

// declare some prefixes to use as abbreviations
prefixes = [ ("ex","http://example.org/") ]

// knowledge source definition
ks.type = "OWL File"

// reasoner
reasoner.type = "closed world reasoner"
reasoner.sources = { ks }

// learning problem
lp.type = "posNegStandard"

// rho?
op.type = "rho"
op.useHasValueConstructor = true
op.useInverse = true
op.useExistsConstructor = true
op.useCardinalityRestrictions = true


// create learning algorithm to runs
alg.type = "celoe"
alg.writeSearchTree = true
alg.searchTreeFile = "log/tc06_rho_celoe_Cv.txt"
alg.operator = op

// automatically generated conf
ks.fileName = "tc06_full.nt" 
lp.positiveExamples = { 
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_7",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_30",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_9",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_18",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_28",
"ex:I_tc06_267",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_10",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_20",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_32",
"ex:I_tc06_162",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_12",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_22",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_14",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_24",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_16",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_26"
}
lp.negativeExamples = { 
"ex:I_tc06_78",
"ex:I_tc06_209",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_17",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_29",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_19",
"ex:I_tc06_230",
"ex:I_tc06_143",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_31",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_21",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_33",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_11",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_23",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_25",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_13",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_15",
"ex:EXTRA_I_FOR_CLASS_C_tc06_31_27"
}
